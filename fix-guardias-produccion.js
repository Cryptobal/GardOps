// Script para diagnosticar y corregir el problema del formulario de guardias en producci√≥n
const https = require('https');

async function diagnosticarProblemaGuardias() {
  console.log('üîç Diagnosticando problema del formulario de guardias en producci√≥n...\n');
  
  // 1. Verificar variables de entorno cr√≠ticas
  console.log('1Ô∏è‚É£ Verificando variables de entorno:');
  const envVars = ['DATABASE_URL', 'POSTGRES_URL', 'JWT_SECRET', 'NODE_ENV'];
  envVars.forEach(env => {
    console.log(`   ${env}: ${process.env[env] ? '‚úÖ Configurada' : '‚ùå Faltante'}`);
  });
  
  // 2. Verificar configuraci√≥n de producci√≥n
  console.log('\n2Ô∏è‚É£ Configuraci√≥n de entorno:');
  console.log(`   NODE_ENV: ${process.env.NODE_ENV}`);
  console.log(`   VERCEL: ${process.env.VERCEL || 'No'}`);
  console.log(`   VERCEL_ENV: ${process.env.VERCEL_ENV || 'No definido'}`);
  
  // 3. Verificar conexi√≥n a base de datos
  console.log('\n3Ô∏è‚É£ Verificando conexi√≥n a base de datos...');
  try {
    if (process.env.NODE_ENV === 'production') {
      const { sql } = require('@vercel/postgres');
      const result = await sql`SELECT 1 as test`;
      console.log('   ‚úÖ Conexi√≥n a base de datos exitosa');
    } else {
      const { query } = require('./src/lib/database');
      await query('SELECT 1');
      console.log('   ‚úÖ Conexi√≥n a base de datos exitosa');
    }
  } catch (error) {
    console.log('   ‚ùå Error de conexi√≥n:', error.message);
  }
  
  // 4. Verificar tabla de permisos
  console.log('\n4Ô∏è‚É£ Verificando tabla de permisos...');
  try {
    if (process.env.NODE_ENV === 'production') {
      const { sql } = require('@vercel/postgres');
      const result = await sql`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = 'permisos'
        ) as exists
      `;
      console.log(`   Tabla permisos: ${result.rows[0].exists ? '‚úÖ Existe' : '‚ùå No existe'}`);
    }
  } catch (error) {
    console.log('   ‚ùå Error verificando tabla permisos:', error.message);
  }
  
  // 5. Verificar funci√≥n de permisos
  console.log('\n5Ô∏è‚É£ Verificando funci√≥n de permisos...');
  try {
    if (process.env.NODE_ENV === 'production') {
      const { sql } = require('@vercel/postgres');
      const result = await sql`
        SELECT EXISTS (
          SELECT FROM pg_proc 
          WHERE proname = 'fn_usuario_tiene_permiso'
        ) as exists
      `;
      console.log(`   Funci√≥n fn_usuario_tiene_permiso: ${result.rows[0].exists ? '‚úÖ Existe' : '‚ùå No existe'}`);
    }
  } catch (error) {
    console.log('   ‚ùå Error verificando funci√≥n:', error.message);
  }
  
  console.log('\nüîß Soluciones recomendadas:');
  console.log('   1. Verificar que DATABASE_URL est√© configurada en Vercel');
  console.log('   2. Verificar que la tabla "permisos" exista en producci√≥n');
  console.log('   3. Verificar que la funci√≥n "fn_usuario_tiene_permiso" exista');
  console.log('   4. Revisar los logs de Vercel para errores espec√≠ficos');
  console.log('   5. Verificar que el usuario tenga el permiso "guardias.view"');
}

async function crearMigracionPermisos() {
  console.log('\nüõ†Ô∏è Creando migraci√≥n de permisos...');
  
  const migracionSQL = `
-- Migraci√≥n para corregir permisos de guardias en producci√≥n

-- 1. Crear tabla de permisos si no existe
CREATE TABLE IF NOT EXISTS public.permisos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL UNIQUE,
    descripcion TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. Insertar permisos b√°sicos de guardias
INSERT INTO public.permisos (nombre, descripcion) VALUES
('guardias.view', 'Ver lista de guardias'),
('guardias.create', 'Crear nuevos guardias'),
('guardias.edit', 'Editar guardias existentes'),
('guardias.delete', 'Eliminar guardias')
ON CONFLICT (nombre) DO NOTHING;

-- 3. Crear funci√≥n de verificaci√≥n de permisos si no existe
CREATE OR REPLACE FUNCTION public.fn_usuario_tiene_permiso(
    p_usuario_id UUID,
    p_permiso VARCHAR(255)
) RETURNS BOOLEAN AS $$
DECLARE
    v_tiene_permiso BOOLEAN := false;
BEGIN
    -- Verificar si el usuario es admin (bypass)
    SELECT EXISTS (
        SELECT 1 FROM public.usuarios u
        JOIN public.roles r ON u.rol_id = r.id
        WHERE u.id = p_usuario_id AND r.nombre = 'admin'
    ) INTO v_tiene_permiso;
    
    IF v_tiene_permiso THEN
        RETURN true;
    END IF;
    
    -- Verificar permisos espec√≠ficos del rol
    SELECT EXISTS (
        SELECT 1 FROM public.usuarios u
        JOIN public.roles r ON u.rol_id = r.id
        JOIN public.roles_permisos rp ON r.id = rp.rol_id
        JOIN public.permisos p ON rp.permiso_id = p.id
        WHERE u.id = p_usuario_id AND p.nombre = p_permiso
    ) INTO v_tiene_permiso;
    
    RETURN v_tiene_permiso;
END;
$$ LANGUAGE plpgsql;

-- 4. Asignar permisos de guardias al rol admin si existe
INSERT INTO public.roles_permisos (rol_id, permiso_id)
SELECT r.id, p.id
FROM public.roles r
CROSS JOIN public.permisos p
WHERE r.nombre = 'admin' 
AND p.nombre LIKE 'guardias.%'
ON CONFLICT DO NOTHING;

-- 5. Crear usuario de prueba si no existe (solo para desarrollo)
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM public.usuarios WHERE email = 'admin@gardops.com') THEN
        INSERT INTO public.usuarios (
            email, 
            nombre, 
            activo, 
            rol_id,
            created_at
        ) VALUES (
            'admin@gardops.com',
            'Administrador',
            true,
            (SELECT id FROM public.roles WHERE nombre = 'admin' LIMIT 1),
            CURRENT_TIMESTAMP
        );
    END IF;
END $$;
`;

  console.log('SQL de migraci√≥n generado. Ejecutar en la base de datos de producci√≥n.');
  return migracionSQL;
}

// Ejecutar diagn√≥stico
if (require.main === module) {
  diagnosticarProblemaGuardias()
    .then(() => {
      console.log('\n‚úÖ Diagn√≥stico completado');
      return crearMigracionPermisos();
    })
    .then((sql) => {
      console.log('\nüìù Migraci√≥n SQL creada exitosamente');
    })
    .catch(error => {
      console.error('‚ùå Error:', error);
    });
}

module.exports = {
  diagnosticarProblemaGuardias,
  crearMigracionPermisos
};