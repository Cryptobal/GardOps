import { sql } from '@vercel/postgres';
import * as dotenv from 'dotenv';
import { writeFileSync } from 'fs';

dotenv.config({ path: '.env.local' });

async function auditarSistemaRBAC() {
  console.log('üîç AUDITOR√çA COMPLETA DEL SISTEMA RBAC - GARDOPS\n');
  console.log('=' . repeat(80));
  
  const informe: string[] = [];
  
  try {
    // 1. AN√ÅLISIS DE USUARIOS CON M√öLTIPLES ROLES
    console.log('\nüìä 1. AN√ÅLISIS DE USUARIOS CON M√öLTIPLES ROLES');
    console.log('-'.repeat(50));
    
    const usuariosMultiplesRoles = await sql`
      SELECT 
        u.email,
        u.nombre,
        u.activo,
        COUNT(ur.rol_id) as num_roles,
        STRING_AGG(r.nombre, ', ' ORDER BY r.nombre) as roles
      FROM usuarios u
      LEFT JOIN usuarios_roles ur ON ur.usuario_id = u.id
      LEFT JOIN roles r ON r.id = ur.rol_id
      GROUP BY u.id, u.email, u.nombre, u.activo
      HAVING COUNT(ur.rol_id) > 1
      ORDER BY num_roles DESC
    `;
    
    if (usuariosMultiplesRoles.rows.length > 0) {
      console.log('‚ö†Ô∏è PROBLEMA DETECTADO: Usuarios con m√∫ltiples roles');
      informe.push('\n## ‚ö†Ô∏è PROBLEMA: USUARIOS CON M√öLTIPLES ROLES');
      informe.push('Esto puede causar conflictos de permisos y p√©rdida de accesos.\n');
      
      usuariosMultiplesRoles.rows.forEach(user => {
        console.log(`   ‚Ä¢ ${user.email}: ${user.num_roles} roles (${user.roles})`);
        informe.push(`- **${user.email}**: ${user.num_roles} roles (${user.roles})`);
      });
    } else {
      console.log('‚úÖ No hay usuarios con m√∫ltiples roles');
      informe.push('\n## ‚úÖ USUARIOS CON M√öLTIPLES ROLES: No detectados');
    }
    
    // 2. AN√ÅLISIS DE USUARIOS SIN ROLES
    console.log('\nüìä 2. AN√ÅLISIS DE USUARIOS SIN ROLES');
    console.log('-'.repeat(50));
    
    const usuariosSinRoles = await sql`
      SELECT 
        u.email,
        u.nombre,
        u.activo,
        u.tenant_id
      FROM usuarios u
      LEFT JOIN usuarios_roles ur ON ur.usuario_id = u.id
      WHERE ur.usuario_id IS NULL
      AND u.activo = true
      ORDER BY u.email
    `;
    
    if (usuariosSinRoles.rows.length > 0) {
      console.log('‚ö†Ô∏è PROBLEMA DETECTADO: Usuarios activos sin roles');
      informe.push('\n## ‚ö†Ô∏è PROBLEMA: USUARIOS ACTIVOS SIN ROLES');
      informe.push('Estos usuarios no pueden acceder al sistema.\n');
      
      usuariosSinRoles.rows.forEach(user => {
        console.log(`   ‚Ä¢ ${user.email} (${user.nombre || 'Sin nombre'})`);
        informe.push(`- **${user.email}** (${user.nombre || 'Sin nombre'})`);
      });
    } else {
      console.log('‚úÖ Todos los usuarios activos tienen roles asignados');
      informe.push('\n## ‚úÖ USUARIOS SIN ROLES: No detectados');
    }
    
    // 3. AN√ÅLISIS DE PERMISOS DUPLICADOS
    console.log('\nüìä 3. AN√ÅLISIS DE PERMISOS DUPLICADOS O CONFLICTIVOS');
    console.log('-'.repeat(50));
    
    const permisosDuplicados = await sql`
      SELECT 
        clave,
        COUNT(*) as cantidad
      FROM permisos
      GROUP BY clave
      HAVING COUNT(*) > 1
    `;
    
    if (permisosDuplicados.rows.length > 0) {
      console.log('‚ö†Ô∏è PROBLEMA DETECTADO: Permisos duplicados');
      informe.push('\n## ‚ö†Ô∏è PROBLEMA: PERMISOS DUPLICADOS');
      
      permisosDuplicados.rows.forEach(perm => {
        console.log(`   ‚Ä¢ ${perm.clave}: ${perm.cantidad} duplicados`);
        informe.push(`- **${perm.clave}**: ${perm.cantidad} duplicados`);
      });
    } else {
      console.log('‚úÖ No hay permisos duplicados');
      informe.push('\n## ‚úÖ PERMISOS DUPLICADOS: No detectados');
    }
    
    // 4. AN√ÅLISIS DE ROLES SIN PERMISOS
    console.log('\nüìä 4. AN√ÅLISIS DE ROLES SIN PERMISOS');
    console.log('-'.repeat(50));
    
    const rolesSinPermisos = await sql`
      SELECT 
        r.nombre,
        r.descripcion,
        r.tenant_id
      FROM roles r
      LEFT JOIN roles_permisos rp ON rp.rol_id = r.id
      WHERE rp.rol_id IS NULL
      ORDER BY r.nombre
    `;
    
    if (rolesSinPermisos.rows.length > 0) {
      console.log('‚ö†Ô∏è PROBLEMA DETECTADO: Roles sin permisos asignados');
      informe.push('\n## ‚ö†Ô∏è PROBLEMA: ROLES SIN PERMISOS');
      
      rolesSinPermisos.rows.forEach(role => {
        console.log(`   ‚Ä¢ ${role.nombre}: ${role.descripcion || 'Sin descripci√≥n'}`);
        informe.push(`- **${role.nombre}**: ${role.descripcion || 'Sin descripci√≥n'}`);
      });
    } else {
      console.log('‚úÖ Todos los roles tienen permisos asignados');
      informe.push('\n## ‚úÖ ROLES SIN PERMISOS: No detectados');
    }
    
    // 5. AN√ÅLISIS DE INCONSISTENCIAS EN TABLAS
    console.log('\nüìä 5. AN√ÅLISIS DE INCONSISTENCIAS EN ESTRUCTURA DE TABLAS');
    console.log('-'.repeat(50));
    
    const tablasRBAC = await sql`
      SELECT 
        tablename as tabla,
        schemaname as esquema
      FROM pg_tables
      WHERE schemaname = 'public'
      AND (
        tablename LIKE '%usuario%' OR
        tablename LIKE '%role%' OR
        tablename LIKE '%permiso%' OR
        tablename LIKE '%rbac%'
      )
      ORDER BY tablename
    `;
    
    console.log('Tablas relacionadas con RBAC encontradas:');
    informe.push('\n## üìã ESTRUCTURA DE TABLAS RBAC\n');
    
    let inconsistencias = false;
    tablasRBAC.rows.forEach(tabla => {
      console.log(`   ‚Ä¢ ${tabla.tabla}`);
      informe.push(`- ${tabla.tabla}`);
      
      // Detectar inconsistencias de nomenclatura
      if (tabla.tabla.includes('rbac_') && 
          (tabla.tabla.includes('usuarios') || tabla.tabla.includes('roles') || tabla.tabla.includes('permisos'))) {
        inconsistencias = true;
      }
    });
    
    if (inconsistencias) {
      console.log('\n‚ö†Ô∏è PROBLEMA: Inconsistencia en nomenclatura (tablas con y sin prefijo rbac_)');
      informe.push('\n‚ö†Ô∏è **Inconsistencia detectada**: Hay tablas con prefijo rbac_ y sin √©l');
    }
    
    // 6. AN√ÅLISIS ESPEC√çFICO DE CARLOS
    console.log('\nüìä 6. AN√ÅLISIS DEL USUARIO CARLOS.IRIGOYEN@GARD.CL');
    console.log('-'.repeat(50));
    
    const carlosAnalisis = await sql`
      SELECT 
        u.id,
        u.email,
        u.nombre,
        u.activo,
        u.rol as rol_campo,
        u.tenant_id,
        COUNT(DISTINCT ur.rol_id) as num_roles,
        STRING_AGG(DISTINCT r.nombre, ', ' ORDER BY r.nombre) as roles_asignados,
        COUNT(DISTINCT p.id) as total_permisos
      FROM usuarios u
      LEFT JOIN usuarios_roles ur ON ur.usuario_id = u.id
      LEFT JOIN roles r ON r.id = ur.rol_id
      LEFT JOIN roles_permisos rp ON rp.rol_id = r.id
      LEFT JOIN permisos p ON p.id = rp.permiso_id
      WHERE LOWER(u.email) = 'carlos.irigoyen@gard.cl'
      GROUP BY u.id, u.email, u.nombre, u.activo, u.rol, u.tenant_id
    `;
    
    if (carlosAnalisis.rows.length > 0) {
      const carlos = carlosAnalisis.rows[0];
      console.log(`   Email: ${carlos.email}`);
      console.log(`   Activo: ${carlos.activo ? 'S√≠' : 'No'}`);
      console.log(`   Rol en campo 'rol': ${carlos.rol_campo || 'No definido'}`);
      console.log(`   Tenant ID: ${carlos.tenant_id || 'NULL (Global)'}`);
      console.log(`   N√∫mero de roles: ${carlos.num_roles}`);
      console.log(`   Roles asignados: ${carlos.roles_asignados || 'NINGUNO'}`);
      console.log(`   Total permisos: ${carlos.total_permisos}`);
      
      informe.push('\n## üë§ AN√ÅLISIS DE CARLOS.IRIGOYEN@GARD.CL\n');
      informe.push(`- **Email**: ${carlos.email}`);
      informe.push(`- **Activo**: ${carlos.activo ? 'S√≠' : 'No'}`);
      informe.push(`- **Rol (campo)**: ${carlos.rol_campo || 'No definido'}`);
      informe.push(`- **Tenant**: ${carlos.tenant_id || 'NULL (Global)'}`);
      informe.push(`- **N√∫mero de roles**: ${carlos.num_roles}`);
      informe.push(`- **Roles**: ${carlos.roles_asignados || 'NINGUNO'}`);
      informe.push(`- **Total permisos**: ${carlos.total_permisos}`);
      
      if (carlos.num_roles > 1) {
        console.log('\n   ‚ö†Ô∏è PROBLEMA: Usuario con m√∫ltiples roles - puede causar conflictos');
        informe.push('\n‚ö†Ô∏è **PROBLEMA**: Usuario con m√∫ltiples roles - puede causar conflictos');
      }
      
      if (carlos.num_roles === 0) {
        console.log('\n   üî¥ PROBLEMA CR√çTICO: Usuario sin roles asignados');
        informe.push('\nüî¥ **PROBLEMA CR√çTICO**: Usuario sin roles asignados');
      }
    } else {
      console.log('‚ùå Usuario carlos.irigoyen@gard.cl no encontrado');
      informe.push('\n## ‚ùå Usuario carlos.irigoyen@gard.cl NO ENCONTRADO');
    }
    
    // 7. ESTAD√çSTICAS GENERALES
    console.log('\nüìä 7. ESTAD√çSTICAS GENERALES DEL SISTEMA');
    console.log('-'.repeat(50));
    
    const stats = await sql`
      SELECT 
        (SELECT COUNT(*) FROM usuarios WHERE activo = true) as usuarios_activos,
        (SELECT COUNT(*) FROM usuarios WHERE activo = false) as usuarios_inactivos,
        (SELECT COUNT(*) FROM roles) as total_roles,
        (SELECT COUNT(*) FROM permisos) as total_permisos,
        (SELECT COUNT(DISTINCT usuario_id) FROM usuarios_roles) as usuarios_con_roles,
        (SELECT COUNT(DISTINCT tenant_id) FROM usuarios WHERE tenant_id IS NOT NULL) as total_tenants
    `;
    
    const stat = stats.rows[0];
    console.log(`   Usuarios activos: ${stat.usuarios_activos}`);
    console.log(`   Usuarios inactivos: ${stat.usuarios_inactivos}`);
    console.log(`   Total de roles: ${stat.total_roles}`);
    console.log(`   Total de permisos: ${stat.total_permisos}`);
    console.log(`   Usuarios con roles: ${stat.usuarios_con_roles}`);
    console.log(`   Total de tenants: ${stat.total_tenants}`);
    
    informe.push('\n## üìà ESTAD√çSTICAS GENERALES\n');
    informe.push(`- **Usuarios activos**: ${stat.usuarios_activos}`);
    informe.push(`- **Usuarios inactivos**: ${stat.usuarios_inactivos}`);
    informe.push(`- **Total de roles**: ${stat.total_roles}`);
    informe.push(`- **Total de permisos**: ${stat.total_permisos}`);
    informe.push(`- **Usuarios con roles**: ${stat.usuarios_con_roles}`);
    informe.push(`- **Total de tenants**: ${stat.total_tenants}`);
    
    // RECOMENDACIONES
    console.log('\n' + '='.repeat(80));
    console.log('üí° RECOMENDACIONES');
    console.log('='.repeat(80));
    
    informe.push('\n# üí° RECOMENDACIONES PARA SOLUCIONAR LOS PROBLEMAS\n');
    
    const recomendaciones = [
      '1. **IMPLEMENTAR UN ROL POR USUARIO**: Limitar a un solo rol por usuario para evitar conflictos',
      '2. **LIMPIAR CACH√â DE PERMISOS**: Implementar invalidaci√≥n de cach√© cuando se modifican permisos',
      '3. **ESTANDARIZAR NOMENCLATURA**: Usar consistentemente tablas sin prefijo rbac_',
      '4. **ASIGNAR ROLES FALTANTES**: Asignar roles a todos los usuarios activos',
      '5. **ELIMINAR DUPLICADOS**: Limpiar permisos y roles duplicados',
      '6. **IMPLEMENTAR AUDITOR√çA**: Registrar todos los cambios de permisos',
      '7. **SIMPLIFICAR PERMISOS**: Considerar permisos directos en lugar de roles m√∫ltiples'
    ];
    
    recomendaciones.forEach(rec => {
      console.log(`\n${rec}`);
      informe.push(rec);
    });
    
    // Guardar informe
    const fecha = new Date().toISOString().split('T')[0];
    const archivo = `INFORME_AUDITORIA_RBAC_${fecha}.md`;
    writeFileSync(archivo, informe.join('\n'));
    
    console.log('\n' + '='.repeat(80));
    console.log(`‚úÖ Auditor√≠a completada. Informe guardado en: ${archivo}`);
    console.log('='.repeat(80));
    
  } catch (error) {
    console.error('‚ùå Error durante la auditor√≠a:', error);
  }
}

auditarSistemaRBAC().catch(console.error);
