import { query } from '../src/lib/database';
import fs from 'fs';
import path from 'path';

async function crearTablasHistorial() {
  console.log('üìã PASO 1: CREANDO TABLAS DE HISTORIAL\n');
  console.log('üéØ Objetivo: Crear auditor√≠a completa para roles y estructuras de servicio\n');

  try {
    // Leer el archivo SQL
    const sqlPath = path.join(__dirname, '../db/create-historial-roles-estructuras.sql');
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');
    
    console.log('üìñ Leyendo archivo SQL...');
    console.log(`üìÅ Ruta: ${sqlPath}`);
    
    // Ejecutar el SQL
    console.log('\nüöÄ Ejecutando SQL de creaci√≥n de tablas...');
    await query(sqlContent);
    
    console.log('‚úÖ SQL ejecutado correctamente');
    
    // Verificar que las tablas se crearon
    console.log('\nüîç Verificando creaci√≥n de tablas...');
    
    const historialRolesExists = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'historial_roles_servicio'
      )
    `);
    
    const historialEstructurasExists = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'historial_estructuras_servicio'
      )
    `);
    
    if (historialRolesExists.rows[0].exists) {
      console.log('‚úÖ Tabla historial_roles_servicio creada correctamente');
    } else {
      console.log('‚ùå Error: historial_roles_servicio no se cre√≥');
    }
    
    if (historialEstructurasExists.rows[0].exists) {
      console.log('‚úÖ Tabla historial_estructuras_servicio creada correctamente');
    } else {
      console.log('‚ùå Error: historial_estructuras_servicio no se cre√≥');
    }
    
    // Verificar estructura de las tablas
    console.log('\nüìä Verificando estructura de tablas...');
    
    const estructuraRoles = await query(`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'historial_roles_servicio'
      ORDER BY ordinal_position
    `);
    
    console.log('üìã Estructura de historial_roles_servicio:');
    estructuraRoles.rows.forEach((col: any) => {
      console.log(`  - ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? '(NOT NULL)' : ''}`);
    });
    
    const estructuraEstructuras = await query(`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'historial_estructuras_servicio'
      ORDER BY ordinal_position
    `);
    
    console.log('\nüìã Estructura de historial_estructuras_servicio:');
    estructuraEstructuras.rows.forEach((col: any) => {
      console.log(`  - ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? '(NOT NULL)' : ''}`);
    });
    
    // Verificar √≠ndices
    console.log('\nüîç Verificando √≠ndices...');
    
    const indicesRoles = await query(`
      SELECT indexname, indexdef
      FROM pg_indexes 
      WHERE tablename = 'historial_roles_servicio'
    `);
    
    console.log('üìã √çndices de historial_roles_servicio:');
    indicesRoles.rows.forEach((idx: any) => {
      console.log(`  - ${idx.indexname}`);
    });
    
    const indicesEstructuras = await query(`
      SELECT indexname, indexdef
      FROM pg_indexes 
      WHERE tablename = 'historial_estructuras_servicio'
    `);
    
    console.log('\nüìã √çndices de historial_estructuras_servicio:');
    indicesEstructuras.rows.forEach((idx: any) => {
      console.log(`  - ${idx.indexname}`);
    });
    
    console.log('\nüéâ ¬°PASO 1 COMPLETADO EXITOSAMENTE!');
    console.log('‚úÖ Tablas de historial creadas y verificadas');
    console.log('‚úÖ √çndices creados para optimizaci√≥n');
    console.log('‚úÖ Estructura validada correctamente');
    
    console.log('\nüìã RESUMEN:');
    console.log('  - historial_roles_servicio: ‚úÖ Creada');
    console.log('  - historial_estructuras_servicio: ‚úÖ Creada');
    console.log('  - √çndices: ‚úÖ Creados');
    console.log('  - Constraints: ‚úÖ Aplicados');
    
    console.log('\nüöÄ Pr√≥ximo paso: Crear funciones de base de datos');
    
  } catch (error) {
    console.error('‚ùå Error creando tablas de historial:', error);
    throw error;
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  crearTablasHistorial()
    .then(() => {
      console.log('\n‚úÖ Script completado exitosamente');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Script fall√≥:', error);
      process.exit(1);
    });
}

export { crearTablasHistorial };
