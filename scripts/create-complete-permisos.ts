import { config } from 'dotenv';
import * as path from 'path';

// Cargar variables de entorno
config({ path: path.join(__dirname, '../.env.local') });

import { sql } from '@vercel/postgres';

async function createCompletePermisos() {
  try {
    console.log('üöÄ Creando permisos completos para todos los m√≥dulos...\n');

    // Lista completa de permisos por m√≥dulo
    const permisosCompletos = [
      // ===== CLIENTES =====
      {
        clave: 'clientes.*',
        descripcion: 'üè¢ **Acceso completo al m√≥dulo de clientes** - Permite gestionar toda la informaci√≥n de clientes, incluyendo creaci√≥n, edici√≥n, eliminaci√≥n y consultas'
      },
      {
        clave: 'clientes.view',
        descripcion: 'üëÅÔ∏è **Ver clientes** - Permite consultar la lista de clientes y ver sus detalles, pero sin poder modificarlos'
      },
      {
        clave: 'clientes.create',
        descripcion: '‚ûï **Crear clientes** - Permite crear nuevos clientes en el sistema'
      },
      {
        clave: 'clientes.edit',
        descripcion: '‚úèÔ∏è **Editar clientes** - Permite modificar informaci√≥n de clientes existentes'
      },
      {
        clave: 'clientes.delete',
        descripcion: 'üóëÔ∏è **Eliminar clientes** - Permite eliminar clientes del sistema'
      },

      // ===== INSTALACIONES =====
      {
        clave: 'instalaciones.*',
        descripcion: 'üè≠ **Acceso completo al m√≥dulo de instalaciones** - Permite gestionar todas las instalaciones, incluyendo turnos, PPCs y asignaciones'
      },
      {
        clave: 'instalaciones.view',
        descripcion: 'üëÅÔ∏è **Ver instalaciones** - Permite consultar la lista de instalaciones y ver sus detalles'
      },
      {
        clave: 'instalaciones.create',
        descripcion: '‚ûï **Crear instalaciones** - Permite crear nuevas instalaciones en el sistema'
      },
      {
        clave: 'instalaciones.edit',
        descripcion: '‚úèÔ∏è **Editar instalaciones** - Permite modificar informaci√≥n de instalaciones existentes'
      },
      {
        clave: 'instalaciones.delete',
        descripcion: 'üóëÔ∏è **Eliminar instalaciones** - Permite eliminar instalaciones del sistema'
      },
      {
        clave: 'instalaciones.turnos',
        descripcion: 'üîÑ **Gestionar turnos de instalaciones** - Permite crear, editar y eliminar turnos en instalaciones'
      },
      {
        clave: 'instalaciones.ppcs',
        descripcion: '‚è≥ **Gestionar PPCs** - Permite asignar y desasignar guardias a Puestos Pendientes por Cubrir'
      },

      // ===== GUARDIAS =====
      {
        clave: 'guardias.*',
        descripcion: 'üëÆ **Acceso completo al m√≥dulo de guardias** - Permite gestionar toda la informaci√≥n de guardias, incluyendo fichas, permisos y finiquitos'
      },
      {
        clave: 'guardias.view',
        descripcion: 'üëÅÔ∏è **Ver guardias** - Permite consultar la lista de guardias y ver sus fichas'
      },
      {
        clave: 'guardias.create',
        descripcion: '‚ûï **Crear guardias** - Permite crear nuevas fichas de guardias'
      },
      {
        clave: 'guardias.edit',
        descripcion: '‚úèÔ∏è **Editar guardias** - Permite modificar informaci√≥n de guardias existentes'
      },
      {
        clave: 'guardias.delete',
        descripcion: 'üóëÔ∏è **Eliminar guardias** - Permite eliminar guardias del sistema'
      },
      {
        clave: 'guardias.permisos',
        descripcion: 'üìã **Gestionar permisos de guardias** - Permite registrar permisos, licencias y vacaciones de guardias'
      },
      {
        clave: 'guardias.finiquitos',
        descripcion: 'üìÑ **Gestionar finiquitos** - Permite procesar finiquitos y terminar contratos de guardias'
      },

      // ===== PAUTA DIARIA =====
      {
        clave: 'pauta-diaria.*',
        descripcion: 'üìÖ **Acceso completo a pauta diaria** - Permite gestionar asistencia, reemplazos y cobertura diaria'
      },
      {
        clave: 'pauta-diaria.view',
        descripcion: 'üëÅÔ∏è **Ver pauta diaria** - Permite consultar la pauta diaria y estado de asistencia'
      },
      {
        clave: 'pauta-diaria.edit',
        descripcion: '‚úèÔ∏è **Editar pauta diaria** - Permite marcar asistencia, ausencias y reemplazos'
      },
      {
        clave: 'pauta-diaria.reemplazos',
        descripcion: 'üîÑ **Gestionar reemplazos** - Permite asignar guardias de reemplazo para ausencias'
      },
      {
        clave: 'pauta-diaria.turnos-extras',
        descripcion: '‚è∞ **Gestionar turnos extras** - Permite crear y gestionar turnos adicionales'
      },

      // ===== PAUTA MENSUAL =====
      {
        clave: 'pauta-mensual.*',
        descripcion: 'üìä **Acceso completo a pauta mensual** - Permite gestionar planificaci√≥n mensual de turnos'
      },
      {
        clave: 'pauta-mensual.view',
        descripcion: 'üëÅÔ∏è **Ver pauta mensual** - Permite consultar la planificaci√≥n mensual de turnos'
      },
      {
        clave: 'pauta-mensual.create',
        descripcion: '‚ûï **Crear pauta mensual** - Permite generar nuevas pautas mensuales'
      },
      {
        clave: 'pauta-mensual.edit',
        descripcion: '‚úèÔ∏è **Editar pauta mensual** - Permite modificar la planificaci√≥n mensual'
      },
      {
        clave: 'pauta-mensual.delete',
        descripcion: 'üóëÔ∏è **Eliminar pauta mensual** - Permite eliminar pautas mensuales'
      },

      // ===== DOCUMENTOS =====
      {
        clave: 'documentos.*',
        descripcion: 'üìÑ **Acceso completo al m√≥dulo de documentos** - Permite gestionar todos los documentos del sistema'
      },
      {
        clave: 'documentos.view',
        descripcion: 'üëÅÔ∏è **Ver documentos** - Permite consultar y descargar documentos'
      },
      {
        clave: 'documentos.upload',
        descripcion: 'üì§ **Subir documentos** - Permite cargar nuevos documentos al sistema'
      },
      {
        clave: 'documentos.edit',
        descripcion: '‚úèÔ∏è **Editar documentos** - Permite modificar informaci√≥n de documentos'
      },
      {
        clave: 'documentos.delete',
        descripcion: 'üóëÔ∏è **Eliminar documentos** - Permite eliminar documentos del sistema'
      },

      // ===== REPORTES =====
      {
        clave: 'reportes.*',
        descripcion: 'üìà **Acceso completo a reportes** - Permite generar y exportar todos los reportes del sistema'
      },
      {
        clave: 'reportes.asistencia',
        descripcion: 'üìä **Reportes de asistencia** - Permite generar reportes de asistencia y ausencias'
      },
      {
        clave: 'reportes.turnos',
        descripcion: 'üîÑ **Reportes de turnos** - Permite generar reportes de turnos y cobertura'
      },
      {
        clave: 'reportes.payroll',
        descripcion: 'üí∞ **Reportes de payroll** - Permite generar reportes de n√≥mina y sueldos'
      },
      {
        clave: 'reportes.export',
        descripcion: 'üì§ **Exportar reportes** - Permite exportar reportes en diferentes formatos'
      },

      // ===== CONFIGURACI√ìN AVANZADA =====
      {
        clave: 'config.tenant',
        descripcion: 'üè¢ **Configuraci√≥n de tenant** - Permite gestionar configuraci√≥n espec√≠fica del tenant'
      },
      {
        clave: 'config.system',
        descripcion: '‚öôÔ∏è **Configuraci√≥n del sistema** - Permite modificar configuraciones globales del sistema'
      },
      {
        clave: 'config.backup',
        descripcion: 'üíæ **Respaldos del sistema** - Permite realizar y gestionar respaldos de datos'
      },

      // ===== AUDITOR√çA =====
      {
        clave: 'auditoria.*',
        descripcion: 'üîç **Acceso completo a auditor√≠a** - Permite consultar logs y auditor√≠a del sistema'
      },
      {
        clave: 'auditoria.logs',
        descripcion: 'üìã **Ver logs del sistema** - Permite consultar logs de actividades del sistema'
      },
      {
        clave: 'auditoria.export',
        descripcion: 'üì§ **Exportar auditor√≠a** - Permite exportar logs y reportes de auditor√≠a'
      }
    ];

    console.log('üìù Insertando permisos...');
    let insertados = 0;
    let existentes = 0;

    for (const permiso of permisosCompletos) {
      try {
        // Verificar si ya existe
        const existing = await sql`
          SELECT id FROM permisos WHERE clave = ${permiso.clave}
        `;

        if (existing.rows.length > 0) {
          console.log(`‚ö†Ô∏è  ${permiso.clave} - Ya existe`);
          existentes++;
        } else {
          // Usar la funci√≥n helper para categorizaci√≥n autom√°tica
          await sql`
            SELECT insert_permiso_auto_categoria(${permiso.clave}, ${permiso.descripcion})
          `;
          console.log(`‚úÖ ${permiso.clave} - Creado`);
          insertados++;
        }
      } catch (error: any) {
        console.log(`‚ùå ${permiso.clave} - Error: ${error.message}`);
      }
    }

    console.log(`\nüéâ Resumen:`);
    console.log(`   - Permisos insertados: ${insertados}`);
    console.log(`   - Permisos existentes: ${existentes}`);
    console.log(`   - Total procesados: ${permisosCompletos.length}`);

    // Mostrar estad√≠sticas finales
    const stats = await sql`
      SELECT 
        COUNT(*) as total,
        COUNT(DISTINCT categoria) as categorias,
        (SELECT COUNT(DISTINCT p.id) FROM permisos p JOIN roles_permisos rp ON rp.permiso_id = p.id) as permisosEnUso
      FROM permisos
    `;

    const finalStats = stats.rows[0];
    console.log('\nüìä Estad√≠sticas finales:');
    console.log(`   - Total de permisos: ${finalStats.total}`);
    console.log(`   - Categor√≠as: ${finalStats.categorias}`);
    console.log(`   - Permisos en uso: ${finalStats.permisosEnUso}`);

    // Mostrar categor√≠as
    const categorias = await sql`
      SELECT categoria, COUNT(*) as total
      FROM permisos 
      WHERE categoria IS NOT NULL
      GROUP BY categoria
      ORDER BY categoria
    `;

    console.log('\nüìÇ Categor√≠as disponibles:');
    categorias.rows.forEach((cat: any) => {
      console.log(`   - ${cat.categoria}: ${cat.total} permisos`);
    });

  } catch (error) {
    console.error('‚ùå Error durante la creaci√≥n:', error);
    throw error;
  }
}

createCompletePermisos().then(() => {
  console.log('\nüèÅ Script completado');
  process.exit(0);
}).catch((error) => {
  console.error('üí• Error fatal:', error);
  process.exit(1);
});
