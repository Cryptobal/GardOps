import { config } from 'dotenv';
import path from 'path';

// Cargar variables de entorno
config({ path: path.join(__dirname, '../.env.local') });

import { query } from '../src/lib/database';

async function createPinFunction() {
  console.log('üöÄ Creando funci√≥n para generar PINs √∫nicos...\n');

  try {
    // Crear funci√≥n para generar PIN √∫nico
    const createFunctionSQL = `
      CREATE OR REPLACE FUNCTION generar_pin_unico() RETURNS VARCHAR(4) AS $$
      DECLARE
          nuevo_pin VARCHAR(4);
          pin_existe BOOLEAN;
      BEGIN
          LOOP
              -- Generar PIN de 4 d√≠gitos aleatorio
              nuevo_pin := LPAD(FLOOR(RANDOM() * 10000)::TEXT, 4, '0');
              
              -- Verificar si el PIN ya existe
              SELECT EXISTS(SELECT 1 FROM guardias WHERE pin = nuevo_pin) INTO pin_existe;
              
              -- Si no existe, salir del bucle
              IF NOT pin_existe THEN
                  EXIT;
              END IF;
          END LOOP;
          
          RETURN nuevo_pin;
      END;
      $$ LANGUAGE plpgsql;
    `;

    console.log('‚ö° Creando funci√≥n generar_pin_unico...');
    await query(createFunctionSQL);
    console.log('‚úÖ Funci√≥n crear_pin_unico creada exitosamente\n');

    // Crear funci√≥n para asignar PIN autom√°ticamente
    const createTriggerFunctionSQL = `
      CREATE OR REPLACE FUNCTION asignar_pin_automatico() RETURNS TRIGGER AS $$
      BEGIN
          -- Solo asignar PIN si no se proporcion√≥ uno
          IF NEW.pin IS NULL OR NEW.pin = '' THEN
              NEW.pin := generar_pin_unico();
          END IF;
          
          RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;
    `;

    console.log('‚ö° Creando funci√≥n asignar_pin_automatico...');
    await query(createTriggerFunctionSQL);
    console.log('‚úÖ Funci√≥n asignar_pin_automatico creada exitosamente\n');

    // Crear el trigger
    const createTriggerSQL = `
      DROP TRIGGER IF EXISTS trigger_asignar_pin_guardias ON guardias;
      CREATE TRIGGER trigger_asignar_pin_guardias
          BEFORE INSERT ON guardias
          FOR EACH ROW
          EXECUTE FUNCTION asignar_pin_automatico();
    `;

    console.log('‚ö° Creando trigger para asignar PIN autom√°ticamente...');
    await query(createTriggerSQL);
    console.log('‚úÖ Trigger creado exitosamente\n');

    // Probar la funci√≥n
    console.log('üß™ Probando funci√≥n de generaci√≥n de PIN...');
    const testResult = await query('SELECT generar_pin_unico() as pin_generado');
    console.log(`‚úÖ PIN generado de prueba: ${testResult.rows[0].pin_generado}\n`);

    console.log('‚úÖ Todas las funciones y triggers creados exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
    process.exit(1);
  }
}

createPinFunction();
