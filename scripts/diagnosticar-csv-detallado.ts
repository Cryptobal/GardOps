#!/usr/bin/env ts-node

import * as fs from 'fs';

// Configuraci√≥n
const FICHA_PATH = "BBDD GGSS.csv";

function diagnosticarCSVDetallado(): void {
  console.log('üîç DIAGN√ìSTICO DETALLADO DE ARCHIVO CSV');
  console.log('='.repeat(60));
  
  if (!fs.existsSync(FICHA_PATH)) {
    console.log(`‚ùå Archivo no encontrado: ${FICHA_PATH}`);
    return;
  }
  
  const contenido = fs.readFileSync(FICHA_PATH, 'utf-8');
  const lineas = contenido.split('\n');
  
  console.log(`üìä Total de l√≠neas: ${lineas.length}`);
  console.log('');
  
  // Mostrar las primeras 5 l√≠neas completas
  console.log('üìã PRIMERAS 5 L√çNEAS COMPLETAS:');
  for (let i = 0; i < Math.min(5, lineas.length); i++) {
    console.log(`\nL√≠nea ${i + 1}:`);
    console.log(`"${lineas[i]}"`);
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üîç AN√ÅLISIS DE LA PRIMERA L√çNEA (HEADERS):');
  
  if (lineas.length > 0) {
    const primeraLinea = lineas[0];
    console.log(`L√≠nea completa: "${primeraLinea}"`);
    console.log(`Longitud: ${primeraLinea.length} caracteres`);
    
    // Contar comillas
    const comillas = (primeraLinea.match(/"/g) || []).length;
    console.log(`N√∫mero de comillas: ${comillas}`);
    
    // Contar comas
    const comas = (primeraLinea.match(/,/g) || []).length;
    console.log(`N√∫mero de comas: ${comas}`);
    
    // Intentar diferentes m√©todos de parsing
    console.log('\nüìã M√âTODOS DE PARSING:');
    
    // M√©todo 1: Split simple por comas
    const splitSimple = primeraLinea.split(',');
    console.log(`1. Split simple: ${splitSimple.length} campos`);
    splitSimple.forEach((campo, index) => {
      console.log(`   ${index + 1}. "${campo}"`);
    });
    
    // M√©todo 2: Split respetando comillas
    const camposConComillas = parsearLineaCSV(primeraLinea);
    console.log(`\n2. Split con comillas: ${camposConComillas.length} campos`);
    camposConComillas.forEach((campo, index) => {
      console.log(`   ${index + 1}. "${campo}"`);
    });
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üîç AN√ÅLISIS DE LA SEGUNDA L√çNEA (PRIMER DATO):');
  
  if (lineas.length > 1) {
    const segundaLinea = lineas[1];
    console.log(`L√≠nea completa: "${segundaLinea}"`);
    console.log(`Longitud: ${segundaLinea.length} caracteres`);
    
    // Contar comillas
    const comillas = (segundaLinea.match(/"/g) || []).length;
    console.log(`N√∫mero de comillas: ${comillas}`);
    
    // Contar comas
    const comas = (segundaLinea.match(/,/g) || []).length;
    console.log(`N√∫mero de comas: ${comas}`);
    
    // Intentar diferentes m√©todos de parsing
    console.log('\nüìã M√âTODOS DE PARSING:');
    
    // M√©todo 1: Split simple por comas
    const splitSimple = segundaLinea.split(',');
    console.log(`1. Split simple: ${splitSimple.length} campos`);
    splitSimple.forEach((campo, index) => {
      console.log(`   ${index + 1}. "${campo}"`);
    });
    
    // M√©todo 2: Split respetando comillas
    const camposConComillas = parsearLineaCSV(segundaLinea);
    console.log(`\n2. Split con comillas: ${camposConComillas.length} campos`);
    camposConComillas.forEach((campo, index) => {
      console.log(`   ${index + 1}. "${campo}"`);
    });
  }
}

// Funci√≥n para parsear una l√≠nea CSV respetando comillas
function parsearLineaCSV(linea: string): string[] {
  const valores: string[] = [];
  let actual = '';
  let dentroComillas = false;
  let i = 0;
  
  while (i < linea.length) {
    const char = linea[i];
    
    if (char === '"') {
      if (dentroComillas && linea[i + 1] === '"') {
        // Comilla escapada
        actual += '"';
        i += 2;
      } else {
        // Cambiar estado de comillas
        dentroComillas = !dentroComillas;
        i++;
      }
    } else if (char === ',' && !dentroComillas) {
      // Fin de campo
      valores.push(actual.trim());
      actual = '';
      i++;
    } else {
      actual += char;
      i++;
    }
  }
  
  // Agregar el √∫ltimo campo
  valores.push(actual.trim());
  
  return valores;
}

// Ejecutar si es el archivo principal
if (require.main === module) {
  diagnosticarCSVDetallado();
}

export { diagnosticarCSVDetallado }; 