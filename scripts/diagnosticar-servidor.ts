#!/usr/bin/env ts-node

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function diagnosticarServidor() {
  console.log('üîç Diagn√≥stico del servidor GardOps...\n');

  try {
    // Verificar si el servidor est√° ejecut√°ndose
    console.log('1. Verificando estado del servidor...');
    const { stdout: psOutput } = await execAsync("ps aux | grep 'next dev' | grep -v grep");
    
    if (psOutput.trim()) {
      console.log('‚úÖ Servidor Next.js est√° ejecut√°ndose');
    } else {
      console.log('‚ùå Servidor Next.js no est√° ejecut√°ndose');
      return;
    }

    // Verificar respuesta del servidor
    console.log('\n2. Verificando respuesta del servidor...');
    const { stdout: curlOutput } = await execAsync('curl -s -o /dev/null -w "%{http_code}" http://localhost:3000');
    
    if (curlOutput.trim() === '200') {
      console.log('‚úÖ Servidor responde correctamente (HTTP 200)');
    } else {
      console.log(`‚ùå Servidor responde con c√≥digo: ${curlOutput.trim()}`);
    }

    // Verificar archivos est√°ticos cr√≠ticos
    console.log('\n3. Verificando archivos est√°ticos...');
    
    const archivosEstaticos = [
      '/_next/static/chunks/main-app.js',
      '/_next/static/chunks/app-pages-internals.js',
      '/_next/static/chunks/app/page.js',
      '/icon'
    ];

    for (const archivo of archivosEstaticos) {
      try {
        const { stdout: statusCode } = await execAsync(`curl -s -o /dev/null -w "%{http_code}" http://localhost:3000${archivo}`);
        if (statusCode.trim() === '200') {
          console.log(`‚úÖ ${archivo} - OK`);
        } else {
          console.log(`‚ùå ${archivo} - Error ${statusCode.trim()}`);
        }
      } catch (error) {
        console.log(`‚ùå ${archivo} - Error de conexi√≥n`);
      }
    }

    // Verificar compilaci√≥n de TypeScript
    console.log('\n4. Verificando compilaci√≥n de TypeScript...');
    try {
      await execAsync('npx tsc --noEmit');
      console.log('‚úÖ Compilaci√≥n de TypeScript sin errores');
    } catch (error) {
      console.log('‚ùå Errores en la compilaci√≥n de TypeScript');
    }

    // Verificar dependencias
    console.log('\n5. Verificando dependencias...');
    try {
      const { stdout: auditOutput } = await execAsync('npm audit --audit-level=high');
      if (auditOutput.includes('found 0 vulnerabilities')) {
        console.log('‚úÖ No hay vulnerabilidades cr√≠ticas');
      } else {
        console.log('‚ö†Ô∏è  Se encontraron vulnerabilidades');
      }
    } catch (error) {
      console.log('‚ùå Error al verificar dependencias');
    }

    console.log('\nüéâ Diagn√≥stico completado!');
    console.log('\nSi todos los checks est√°n en verde, tu servidor est√° funcionando correctamente.');
    console.log('Si hay errores, revisa los logs del servidor con: npm run dev');

  } catch (error) {
    console.error('‚ùå Error durante el diagn√≥stico:', error);
  }
}

diagnosticarServidor(); 