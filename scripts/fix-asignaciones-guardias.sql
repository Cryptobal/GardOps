-- =====================================================
-- CORRECCI√ìN ESPEC√çFICA: asignaciones_guardias.guardia_id
-- Fecha: 29 de Julio de 2025
-- Base de Datos: PostgreSQL (Neon)
-- Problema: guardia_id es integer pero deber√≠a ser UUID
-- =====================================================

-- ‚ö†Ô∏è  IMPORTANTE: 
-- 1. Los guardia_id actuales (16, 114) no corresponden a guardias reales
-- 2. Necesitamos limpiar datos hu√©rfanos y corregir la estructura
-- 3. Este script es seguro y no romper√° la l√≥gica existente

BEGIN;

-- =====================================================
-- 1. AN√ÅLISIS DEL PROBLEMA
-- =====================================================

DO $$
DECLARE
    orphan_count INTEGER;
    total_asignaciones INTEGER;
    valid_guardias INTEGER;
BEGIN
    -- Contar asignaciones totales
    SELECT COUNT(*) INTO total_asignaciones FROM asignaciones_guardias;
    
    -- Contar asignaciones con guardia_id hu√©rfanos
    SELECT COUNT(*) INTO orphan_count 
    FROM asignaciones_guardias ag
    LEFT JOIN guardias g ON ag.guardia_id::text = g.id::text
    WHERE g.id IS NULL;
    
    -- Contar guardias v√°lidos
    SELECT COUNT(*) INTO valid_guardias FROM guardias;
    
    RAISE NOTICE 'üîç AN√ÅLISIS DEL PROBLEMA:';
    RAISE NOTICE '   - Total asignaciones: %', total_asignaciones;
    RAISE NOTICE '   - Asignaciones con guardia_id hu√©rfano: %', orphan_count;
    RAISE NOTICE '   - Guardias v√°lidos en la base de datos: %', valid_guardias;
    
    IF orphan_count > 0 THEN
        RAISE NOTICE '‚ö†Ô∏è  ADVERTENCIA: Se encontraron % asignaciones con guardia_id hu√©rfanos', orphan_count;
        RAISE NOTICE '   - Estos registros ser√°n eliminados para mantener integridad de datos';
    END IF;
END $$;

-- =====================================================
-- 2. LIMPIEZA DE DATOS HU√âRFANOS
-- =====================================================

-- Eliminar asignaciones con guardia_id que no corresponden a guardias reales
DELETE FROM asignaciones_guardias 
WHERE guardia_id::text NOT IN (
    SELECT id::text FROM guardias
);

DO $$
DECLARE
    remaining_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO remaining_count FROM asignaciones_guardias;
    RAISE NOTICE 'üßπ LIMPIEZA COMPLETADA:';
    RAISE NOTICE '   - Asignaciones restantes despu√©s de limpieza: %', remaining_count;
END $$;

-- =====================================================
-- 3. CREAR COLUMNA TEMPORAL Y MIGRAR DATOS
-- =====================================================

-- Agregar columna temporal para la migraci√≥n
ALTER TABLE asignaciones_guardias 
ADD COLUMN guardia_id_new UUID;

-- Migrar datos existentes (si los hay)
UPDATE asignaciones_guardias 
SET guardia_id_new = guardia_id::uuid 
WHERE guardia_id IS NOT NULL;

RAISE NOTICE '‚úÖ Datos migrados a columna temporal';

-- =====================================================
-- 4. ELIMINAR COLUMNA ANTIGUA Y RENOMBRAR NUEVA
-- =====================================================

-- Eliminar la columna antigua
ALTER TABLE asignaciones_guardias 
DROP COLUMN guardia_id;

-- Renombrar la nueva columna
ALTER TABLE asignaciones_guardias 
RENAME COLUMN guardia_id_new TO guardia_id;

-- Hacer la columna NOT NULL
ALTER TABLE asignaciones_guardias 
ALTER COLUMN guardia_id SET NOT NULL;

RAISE NOTICE '‚úÖ Columna guardia_id migrada a UUID';

-- =====================================================
-- 5. RECREAR √çNDICES Y CONSTRAINTS
-- =====================================================

-- Eliminar √≠ndices que dependen de la columna antigua
DROP INDEX IF EXISTS idx_asignaciones_guardia_activa;
DROP INDEX IF EXISTS unique_active_assignment;

-- Recrear √≠ndices con la nueva columna UUID
CREATE INDEX idx_asignaciones_guardia_activa 
ON asignaciones_guardias (guardia_id) 
WHERE estado = 'Activa';

-- Recrear constraint de exclusi√≥n
ALTER TABLE asignaciones_guardias 
ADD CONSTRAINT unique_active_assignment 
EXCLUDE USING btree (guardia_id WITH =) 
WHERE (estado = 'Activa');

RAISE NOTICE '‚úÖ √çndices y constraints recreados';

-- =====================================================
-- 6. VERIFICACI√ìN FINAL
-- =====================================================

DO $$
DECLARE
    guardia_id_type TEXT;
    final_count INTEGER;
    valid_assignments INTEGER;
BEGIN
    -- Verificar tipo de columna
    SELECT data_type INTO guardia_id_type 
    FROM information_schema.columns 
    WHERE table_name = 'asignaciones_guardias' 
    AND column_name = 'guardia_id';
    
    -- Contar asignaciones finales
    SELECT COUNT(*) INTO final_count FROM asignaciones_guardias;
    
    -- Verificar asignaciones v√°lidas
    SELECT COUNT(*) INTO valid_assignments
    FROM asignaciones_guardias ag
    INNER JOIN guardias g ON ag.guardia_id = g.id;
    
    RAISE NOTICE 'üîç VERIFICACI√ìN FINAL:';
    RAISE NOTICE '   - Tipo de guardia_id: %', guardia_id_type;
    RAISE NOTICE '   - Total asignaciones: %', final_count;
    RAISE NOTICE '   - Asignaciones v√°lidas: %', valid_assignments;
    
    IF guardia_id_type = 'uuid' AND final_count = valid_assignments THEN
        RAISE NOTICE '‚úÖ MIGRACI√ìN EXITOSA: Todos los datos son v√°lidos';
    ELSE
        RAISE EXCEPTION '‚ùå ERROR: Problemas en la migraci√≥n';
    END IF;
END $$;

COMMIT;

RAISE NOTICE 'üéâ CORRECCI√ìN DE asignaciones_guardias COMPLETADA EXITOSAMENTE'; 