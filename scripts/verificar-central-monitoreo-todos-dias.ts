#!/usr/bin/env ts-node

import { query } from '../src/lib/database';

async function verificarCentralMonitoreoTodosDias() {
  console.log('üîç VERIFICANDO CENTRAL DE MONITOREO PARA TODOS LOS D√çAS\n');

  try {
    // 1. Verificar turnos planificados para el d√≠a actual
    const fechaActual = new Date().toISOString().split('T')[0];
    const [anioActual, mesActual, diaActual] = fechaActual.split('-').map(Number);
    
    console.log(`üìÖ Verificando fecha actual: ${fechaActual}`);

    const turnosActuales = await query(`
      SELECT 
        pm.estado,
        COUNT(*) as cantidad
      FROM as_turnos_pauta_mensual pm
      INNER JOIN as_turnos_puestos_operativos po ON pm.puesto_id = po.id
      WHERE pm.anio = $1 AND pm.mes = $2 AND pm.dia = $3
        AND po.activo = true
      GROUP BY pm.estado
      ORDER BY pm.estado
    `, [anioActual, mesActual, diaActual]);

    console.log('üìä Turnos para el d√≠a actual:');
    turnosActuales.rows.forEach((row: any) => {
      console.log(`   - ${row.estado}: ${row.cantidad} turnos`);
    });

    // 2. Verificar instalaciones con turnos planificados hoy
    const instalacionesHoy = await query(`
      SELECT DISTINCT 
        i.nombre as instalacion_nombre,
        COUNT(pm.id) as turnos_planificados
      FROM as_turnos_pauta_mensual pm
      INNER JOIN instalaciones i ON pm.instalacion_id = i.id
      WHERE pm.anio = $1 AND pm.mes = $2 AND pm.dia = $3
        AND pm.estado = 'planificado'
      GROUP BY i.nombre
      ORDER BY i.nombre
    `, [anioActual, mesActual, diaActual]);

    console.log(`\nüìã Instalaciones con turnos planificados hoy: ${instalacionesHoy.rows.length}`);
    instalacionesHoy.rows.forEach((row: any) => {
      console.log(`   - ${row.instalacion_nombre}: ${row.turnos_planificados} turnos`);
    });

    // 3. Verificar configuraci√≥n de monitoreo
    const configuracionMonitoreo = await query(`
      SELECT 
        i.nombre as instalacion_nombre,
        cci.habilitado,
        cci.intervalo_minutos,
        cci.ventana_inicio,
        cci.ventana_fin
      FROM central_config_instalacion cci
      INNER JOIN instalaciones i ON cci.instalacion_id = i.id
      ORDER BY i.nombre
    `);

    console.log(`\nüìã Configuraci√≥n de monitoreo: ${configuracionMonitoreo.rows.length} instalaciones`);
    configuracionMonitoreo.rows.forEach((row: any) => {
      const habilitado = row.habilitado ? '‚úÖ HABILITADO' : '‚ùå NO HABILITADO';
      const config = `${row.intervalo_minutos}min, ${row.ventana_inicio}-${row.ventana_fin}`;
      console.log(`   - ${row.instalacion_nombre}: ${habilitado} (${config})`);
    });

    // 4. Verificar llamados autom√°ticos para hoy
    const llamadosHoy = await query(`
      SELECT 
        COUNT(*) as total_llamados,
        COUNT(CASE WHEN es_actual THEN 1 END) as actuales,
        COUNT(CASE WHEN es_proximo THEN 1 END) as proximos,
        COUNT(CASE WHEN es_urgente THEN 1 END) as urgentes
      FROM central_v_llamados_automaticos
      WHERE DATE(programado_para) = $1
    `, [fechaActual]);

    const stats = llamadosHoy.rows[0];
    console.log(`\nüìä Llamados autom√°ticos para hoy: ${stats.total_llamados}`);
    console.log(`   - Actuales: ${stats.actuales}`);
    console.log(`   - Pr√≥ximos: ${stats.proximos}`);
    console.log(`   - Urgentes: ${stats.urgentes}`);

    // 5. Verificar paso a paso por qu√© no hay llamados
    console.log('\nüîç INVESTIGANDO POR QU√â NO HAY LLAMADOS:');
    
    // Paso 1: Turnos planificados con configuraci√≥n
    const turnosConConfig = await query(`
      SELECT 
        pm.id as pauta_id,
        i.nombre as instalacion_nombre,
        pm.estado,
        po.activo as puesto_activo,
        cci.habilitado,
        cci.intervalo_minutos,
        cci.ventana_inicio,
        cci.ventana_fin
      FROM as_turnos_pauta_mensual pm
      INNER JOIN instalaciones i ON pm.instalacion_id = i.id
      INNER JOIN as_turnos_puestos_operativos po ON pm.puesto_id = po.id
      LEFT JOIN central_config_instalacion cci ON cci.instalacion_id = i.id
      WHERE pm.anio = $1 AND pm.mes = $2 AND pm.dia = $3
        AND pm.estado = 'planificado'
        AND po.activo = true
      ORDER BY i.nombre
    `, [anioActual, mesActual, diaActual]);

    console.log(`\nüìã Turnos planificados con configuraci√≥n: ${turnosConConfig.rows.length}`);
    turnosConConfig.rows.forEach((row: any) => {
      const habilitado = row.habilitado ? 'HABILITADO' : 'NO HABILITADO';
      const config = row.intervalo_minutos ? 
        `${row.intervalo_minutos}min, ${row.ventana_inicio}-${row.ventana_fin}` : 
        'SIN CONFIGURAR';
      console.log(`   - ${row.instalacion_nombre}: ${row.estado} - Config: ${habilitado} (${config})`);
    });

    // 6. Verificar qu√© filtros est√°n fallando en la vista
    console.log('\nüîç VERIFICANDO FILTROS DE LA VISTA:');
    
    // Sin filtro de configuraci√≥n
    const sinFiltroConfig = await query(`
      SELECT 
        pm.id as pauta_id,
        i.nombre as instalacion_nombre,
        pm.estado,
        po.activo as puesto_activo,
        cci.habilitado,
        cci.intervalo_minutos,
        cci.ventana_inicio,
        cci.ventana_fin
      FROM as_turnos_pauta_mensual pm
      INNER JOIN instalaciones i ON pm.instalacion_id = i.id
      INNER JOIN as_turnos_puestos_operativos po ON pm.puesto_id = po.id
      LEFT JOIN central_config_instalacion cci ON cci.instalacion_id = i.id
      WHERE po.activo = true
        AND pm.estado = 'planificado'
        AND pm.anio = $1 AND pm.mes = $2 AND pm.dia = $3
      ORDER BY i.nombre
    `, [anioActual, mesActual, diaActual]);

    console.log(`üìä Sin filtro de configuraci√≥n: ${sinFiltroConfig.rows.length}`);
    sinFiltroConfig.rows.forEach((row: any) => {
      const habilitado = row.habilitado ? 'HABILITADO' : 'NO HABILITADO';
      const config = row.intervalo_minutos ? 
        `${row.intervalo_minutos}min, ${row.ventana_inicio}-${row.ventana_fin}` : 
        'SIN CONFIGURAR';
      console.log(`   - ${row.instalacion_nombre}: ${row.estado} - Config: ${habilitado} (${config})`);
    });

    // 7. Verificar instalaciones que necesitan configuraci√≥n
    const instalacionesSinConfig = sinFiltroConfig.rows.filter((row: any) => !row.habilitado || !row.intervalo_minutos);
    
    if (instalacionesSinConfig.length > 0) {
      console.log('\n‚ö†Ô∏è INSTALACIONES QUE NECESITAN CONFIGURACI√ìN:');
      instalacionesSinConfig.forEach((row: any) => {
        const problema = !row.habilitado ? 'NO HABILITADO' : 'SIN INTERVALO';
        console.log(`   - ${row.instalacion_nombre}: ${problema}`);
      });
    }

    // 8. Resumen y recomendaciones
    console.log('\nüìã AN√ÅLISIS COMPLETO:');
    console.log('==========================');
    
    if (instalacionesHoy.rows.length === 0) {
      console.log('‚ùå PROBLEMA: No hay instalaciones con turnos planificados hoy');
    } else if (stats.total_llamados === 0) {
      console.log('‚ùå PROBLEMA: Hay turnos planificados pero no se generan llamados autom√°ticos');
      
      if (instalacionesSinConfig.length > 0) {
        console.log(`   üîß CAUSA: ${instalacionesSinConfig.length} instalaciones sin configuraci√≥n completa`);
      } else {
        console.log('   üîß CAUSA: Problema en la l√≥gica de la vista autom√°tica');
      }
    } else {
      console.log('‚úÖ Central de Monitoreo funcionando correctamente');
    }

    console.log('\nüîß RECOMENDACIONES:');
    if (instalacionesSinConfig.length > 0) {
      console.log('1. Configurar monitoreo para las instalaciones que no lo tienen');
      console.log('2. Habilitar monitoreo para todas las instalaciones con turnos planificados');
    }
    if (stats.total_llamados === 0 && instalacionesHoy.rows.length > 0) {
      console.log('3. Revisar la l√≥gica de la vista autom√°tica');
    }

  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
  } finally {
    process.exit(0);
  }
}

// Cargar variables de entorno
import dotenv from 'dotenv';
dotenv.config({ path: '.env.local' });

verificarCentralMonitoreoTodosDias();
