/**
 * Sistema de logging controlado por ambiente para GardOps
 * Elimina logs de debug en producci√≥n manteniendo logs cr√≠ticos
 */

const isDevelopment = process.env.NODE_ENV === 'development';
const isProduction = process.env.NODE_ENV === 'production';

// Tipos de log permitidos en producci√≥n
type LogLevel = 'debug' | 'info' | 'warn' | 'error';

// Configuraci√≥n de logs por ambiente
const LOG_CONFIG = {
  development: {
    debug: true,
    info: true,
    warn: true,
    error: true,
  },
  production: {
    debug: false, // üî¥ ELIMINADO EN PRODUCCI√ìN
    info: false,  // üî¥ ELIMINADO EN PRODUCCI√ìN
    warn: true,   // ‚úÖ MANTENIDO EN PRODUCCI√ìN
    error: true,  // ‚úÖ MANTENIDO EN PRODUCCI√ìN
  }
};

const currentConfig = isProduction ? LOG_CONFIG.production : LOG_CONFIG.development;

/**
 * Logger principal - Reemplaza console.log en toda la aplicaci√≥n
 */
export const logger = {
  /**
   * Logs de debug - ELIMINADOS EN PRODUCCI√ìN
   * Usar para: estado de variables, flujo de aplicaci√≥n, debugging
   */
  debug: (...args: any[]) => {
    if (currentConfig.debug) {
      console.log('[DEBUG]', ...args);
    }
  },

  /**
   * Logs informativos - ELIMINADOS EN PRODUCCI√ìN
   * Usar para: informaci√≥n general no cr√≠tica
   */
  info: (...args: any[]) => {
    if (currentConfig.info) {
      console.info('[INFO]', ...args);
    }
  },

  /**
   * Advertencias - MANTENIDAS EN PRODUCCI√ìN
   * Usar para: situaciones que requieren atenci√≥n pero no son errores
   */
  warn: (...args: any[]) => {
    if (currentConfig.warn) {
      console.warn('[WARN]', ...args);
    }
  },

  /**
   * Errores - MANTENIDOS EN PRODUCCI√ìN
   * Usar para: errores cr√≠ticos, excepciones, fallos de sistema
   */
  error: (...args: any[]) => {
    if (currentConfig.error) {
      console.error('[ERROR]', ...args);
    }
  },

  /**
   * Logs de seguridad - SIEMPRE ACTIVOS
   * Para eventos de seguridad cr√≠ticos
   */
  security: (...args: any[]) => {
    console.warn('[SECURITY]', ...args);
  }
};

/**
 * Funciones de conveniencia con emojis para desarrollo
 * Se eliminan autom√°ticamente en producci√≥n
 */
export const devLogger = {
  search: (...args: any[]) => logger.debug('üîç', ...args),
  process: (...args: any[]) => logger.debug('üîÑ', ...args),
  success: (...args: any[]) => logger.debug('‚úÖ', ...args),
  warning: (...args: any[]) => logger.debug('‚ö†Ô∏è', ...args),
  critical: (...args: any[]) => logger.debug('üö®', ...args),
  data: (...args: any[]) => logger.debug('üìä', ...args),
  api: (...args: any[]) => logger.debug('üåê', ...args),
  db: (...args: any[]) => logger.debug('üóÑÔ∏è', ...args),
};

/**
 * Logger espec√≠fico para APIs
 */
export const apiLogger = {
  request: (method: string, url: string, data?: any) => {
    logger.debug(`üåê ${method} ${url}`, data);
  },
  response: (status: number, url: string, data?: any) => {
    logger.debug(`üåê ${status} ${url}`, data);
  },
  error: (method: string, url: string, error: any) => {
    logger.error(`üåê ${method} ${url} ERROR:`, error);
  }
};

/**
 * Funci√≥n para migraci√≥n gradual - reemplazar console.log existente
 * @deprecated Usar logger.debug() en su lugar
 */
export const debugLog = (...args: any[]) => {
  logger.debug(...args);
};

/**
 * Funci√≥n para migraci√≥n gradual - reemplazar console.error existente
 * @deprecated Usar logger.error() en su lugar
 */
export const errorLog = (...args: any[]) => {
  logger.error(...args);
};

// Exportar como default para facilitar importaci√≥n
export default logger;
